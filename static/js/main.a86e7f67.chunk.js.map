{"version":3,"sources":["components/AlbumCard/index.js","App.js","serviceWorker.js","index.js"],"names":["AlbumCard","props","Fragment","className","style","maxWidth","src","image","alt","name","year","description","api","App","useState","query","setQuery","artist","setArtist","album","setAlbum","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","artists","strArtistBanner","onClick","scroll","scrollTo","strArtist","strBiographyEN","color","map","item","idAlbum","strAlbum","intYearReleased","strAlbumThumb","strDescriptionEN","scrollToTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iQA8BeA,MA5Bf,SAAmBC,GACjB,OAME,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,oCACb,yBAAKA,UAAU,YAAYC,MAAO,CAACC,SAAU,UAC3C,yBAAKF,UAAU,kBACb,yBAAKA,UAAU,YACb,yBAAKG,IAAKL,EAAMM,MAAOJ,UAAU,WAAWK,IAAI,gBAElD,yBAAKL,UAAU,YACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcF,EAAMQ,MAClC,uBAAGN,UAAU,aAAaF,EAAMS,MAChC,uBAAGP,UAAU,aAAaF,EAAMU,oBCf1CC,G,MACE,yCAmFOC,MAhFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAkCb,OACE,yBAAKjB,UAAU,OACb,8BACE,yBAAKA,UAAU,cACb,2BACEkB,KAAK,OACLlB,UAAU,aACVmB,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WAvCK,SAAAC,GACI,UAAdA,EAAMC,KACPC,MAAM,GAAD,OAAIlB,EAAJ,wBAA4BG,IAC9BgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAUgB,GACVd,EAAS,WAoCgB,oBAAlBH,EAAOkB,SAA4C,MAAlBlB,EAAOkB,QAC/C,6BACE,yBAAKhC,UAAU,aACb,yBAAKG,IAAKW,EAAOkB,QAAQ,GAAGC,gBAAiBjC,UAAU,eAAeK,IAAI,QAC1E,yBAAKL,UAAU,aACb,4BAAQkC,QApCtB,WACEP,MAAM,GAAD,OAAIlB,EAAJ,6BAAiCG,IACnCgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJd,EAASc,GACTlB,EAAS,OAUbsB,gBAAOC,SAAS,MAqB0BpC,UAAU,8CAA8Cc,EAAOkB,QAAQ,GAAGK,WACxG,2BAAIvB,EAAOkB,QAAQ,GAAGM,mBAIzB,GACmB,oBAAftB,EAAMA,OAAuC,MAAfA,EAAMA,MAC3C,6BACE,wBAAIf,MAAO,CAACsC,MAAM,UAAlB,cACCvB,EAAMA,MAAMwB,KAAI,SAACC,GAChB,OACE,kBAAC,EAAD,CACEf,IAAOe,EAAKC,QACZpC,KAAQmC,EAAKE,SACbpC,KAAQkC,EAAKG,gBACbxC,MAASqC,EAAKI,cACdrC,YAAeiC,EAAKK,sBAI1B,4BAAQ9C,UAAU,kCAAkCkC,QA9C9D,WACEC,gBAAOY,gBA6CC,gBAEC,MCvEOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a86e7f67.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AlbumCard(props) {\n  return (\n    // <div className=\"col mb-4 mt-5\">\n    //   <div className=\"card h-100 border-dark\">\n        \n    //   </div>\n    // </div>\n    <React.Fragment>\n      <div className=\"card-deck justify-content-center\">\n        <div className=\"card mb-3\" style={{maxWidth: \"640px\"}}>\n          <div className=\"row no-gutters\">\n            <div className=\"col-md-4\">\n              <img src={props.image} className=\"card-img\" alt=\"imageThumb\"/>\n            </div>\n            <div className=\"col-md-8\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{props.name}</h5>\n                <p className=\"card-text\">{props.year}</p>\n                <p className=\"card-text\">{props.description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default AlbumCard;","import React, { useState } from 'react';\nimport { animateScroll as scroll} from 'react-scroll';\nimport AlbumCard from \"./components/AlbumCard\"\nimport './App.css';\n\nconst api = {\n  base: \"https://theaudiodb.com/api/v1/json/1/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [artist, setArtist] = useState([]);\n  const [album, setAlbum] = useState([]);\n\n  const search = event => {\n    if(event.key === \"Enter\") {\n      fetch(`${api.base}search.php?s=${query}`)\n        .then(res => res.json())\n        .then(result => {\n          setArtist(result);\n          setAlbum([]);\n        });\n      }\n  }\n        \n  function searchAlbum() {\n    fetch(`${api.base}searchalbum.php?s=${query}`)\n      .then(res => res.json())\n      .then(result => {\n        setAlbum(result);\n        setQuery('');\n    });\n    scrollTo()\n  }\n\n  function scrollToTop() {\n    scroll.scrollToTop();\n  }\n\n  function scrollTo() {\n    scroll.scrollTo(800);\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search Artist...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof artist.artists != \"undefined\" && artist.artists != null) ? (\n          <div>\n            <div className=\"card mb-3\">\n              <img src={artist.artists[0].strArtistBanner} className=\"card-img-top\" alt=\"...\"/>\n              <div className=\"card-body\">\n                <button onClick={searchAlbum} className=\"card-title btn btn-primary btn-custom zoom\">{artist.artists[0].strArtist}</button>\n                <p>{artist.artists[0].strBiographyEN}</p>\n              </div>\n            </div>\n          </div>\n        ) : ('')}\n        {(typeof album.album != \"undefined\" && album.album != null) ? (\n          <div>\n            <h1 style={{color:\"white\"}}>Album List</h1>\n            {album.album.map((item) => {\n              return (\n                <AlbumCard\n                  key = {item.idAlbum}\n                  name = {item.strAlbum}\n                  year = {item.intYearReleased}\n                  image = {item.strAlbumThumb}\n                  description = {item.strDescriptionEN}\n                />\n              );\n            })}\n            <button className=\"btn btn-primary btn-custom zoom\" onClick={scrollToTop}>To the top!</button>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}